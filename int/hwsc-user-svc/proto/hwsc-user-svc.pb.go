// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hwsc-user-svc.proto

package hwscUserSvcPb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserRequest struct {
	User                 []*User  `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty"`
	Duid                 string   `protobuf:"bytes,2,opt,name=duid,proto3" json:"duid,omitempty"`
	UuidsToShareDuid     []string `protobuf:"bytes,3,rep,name=uuids_to_share_duid,json=uuidsToShareDuid,proto3" json:"uuids_to_share_duid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3f735c05652365, []int{0}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserRequest) GetDuid() string {
	if m != nil {
		return m.Duid
	}
	return ""
}

func (m *UserRequest) GetUuidsToShareDuid() []string {
	if m != nil {
		return m.UuidsToShareDuid
	}
	return nil
}

type UserResponse struct {
	// Types that are valid to be assigned to Status:
	//	*UserResponse_Code
	Status               isUserResponse_Status `protobuf_oneof:"status"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	User                 *User                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	UserCollection       []*User               `protobuf:"bytes,4,rep,name=user_collection,json=userCollection,proto3" json:"user_collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" bson:"-"`
	XXX_unrecognized     []byte                `json:"-" bson:"-"`
	XXX_sizecache        int32                 `json:"-" bson:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3f735c05652365, []int{1}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

type isUserResponse_Status interface {
	isUserResponse_Status()
}

type UserResponse_Code struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

func (*UserResponse_Code) isUserResponse_Status() {}

func (m *UserResponse) GetStatus() isUserResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UserResponse) GetCode() uint32 {
	if x, ok := m.GetStatus().(*UserResponse_Code); ok {
		return x.Code
	}
	return 0
}

func (m *UserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserResponse) GetUserCollection() []*User {
	if m != nil {
		return m.UserCollection
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserResponse_OneofMarshaler, _UserResponse_OneofUnmarshaler, _UserResponse_OneofSizer, []interface{}{
		(*UserResponse_Code)(nil),
	}
}

func _UserResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserResponse)
	// status
	switch x := m.Status.(type) {
	case *UserResponse_Code:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Code))
	case nil:
	default:
		return fmt.Errorf("UserResponse.Status has unexpected type %T", x)
	}
	return nil
}

func _UserResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserResponse)
	switch tag {
	case 1: // status.code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Status = &UserResponse_Code{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _UserResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserResponse)
	// status
	switch x := m.Status.(type) {
	case *UserResponse_Code:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Code))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "hwscUserSvc.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "hwscUserSvc.UserResponse")
}

func init() { proto.RegisterFile("hwsc-user-svc.proto", fileDescriptor_dc3f735c05652365) }

var fileDescriptor_dc3f735c05652365 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0xe9, 0xdf, 0x06, 0xfe, 0x5e, 0x44, 0xc8, 0xe0, 0xa2, 0xb2, 0x30, 0x0d, 0xab, 0x6e,
	0xe8, 0x02, 0x5e, 0x40, 0x0b, 0x11, 0x4d, 0x5c, 0x98, 0x56, 0x36, 0x6e, 0x9a, 0x32, 0xbd, 0x91,
	0x49, 0xa0, 0x53, 0x3b, 0x33, 0xf8, 0x34, 0x3e, 0x88, 0x6f, 0x67, 0x66, 0xaa, 0x84, 0x44, 0x56,
	0x74, 0xd5, 0xce, 0xf9, 0x6e, 0xcf, 0x9c, 0x39, 0xe9, 0xc0, 0x70, 0xf3, 0x21, 0xe8, 0x44, 0x09,
	0xac, 0x26, 0x62, 0x4f, 0xc3, 0xb2, 0xe2, 0x92, 0x93, 0xae, 0x16, 0x57, 0x02, 0xab, 0x64, 0x4f,
	0x47, 0xa0, 0x61, 0x0d, 0xc6, 0x25, 0x74, 0xb5, 0x1c, 0xe3, 0xbb, 0x42, 0x21, 0xc9, 0x0d, 0x38,
	0x1a, 0x7a, 0x96, 0x6f, 0x07, 0xdd, 0x29, 0x84, 0xfa, 0xb3, 0xd0, 0x0c, 0x18, 0x9d, 0x10, 0x70,
	0x72, 0xc5, 0x72, 0xef, 0x9f, 0x6f, 0x05, 0x6e, 0x6c, 0xde, 0xc9, 0x04, 0x86, 0x4a, 0xb1, 0x5c,
	0xa4, 0x92, 0xa7, 0x62, 0x93, 0x55, 0x98, 0x9a, 0x11, 0xdb, 0xb7, 0x03, 0x37, 0x1e, 0x18, 0xf4,
	0xc2, 0x13, 0x0d, 0x16, 0x8a, 0xe5, 0xe3, 0x4f, 0x0b, 0x2e, 0xea, 0x2d, 0x45, 0xc9, 0x0b, 0x81,
	0xe4, 0x0a, 0x1c, 0xca, 0x73, 0xf4, 0x2c, 0xdf, 0x0a, 0x7a, 0x0f, 0xad, 0xd8, 0xac, 0x88, 0x07,
	0x9d, 0x1d, 0x0a, 0x91, 0xbd, 0xe1, 0xcf, 0x66, 0xbf, 0xcb, 0x43, 0x46, 0xdb, 0xb7, 0x4e, 0x66,
	0x9c, 0x41, 0x5f, 0x3f, 0x53, 0xca, 0xb7, 0x5b, 0xa4, 0x92, 0xf1, 0xc2, 0x73, 0xfe, 0x1c, 0xe7,
	0x52, 0x8f, 0xcc, 0x0f, 0x13, 0xd1, 0x7f, 0x68, 0x0b, 0x99, 0x49, 0x25, 0xa6, 0x5f, 0x4e, 0x5d,
	0x49, 0x82, 0xd5, 0x9e, 0x51, 0x24, 0x11, 0xb8, 0x4b, 0x94, 0x89, 0x81, 0xc4, 0x0b, 0x8f, 0x8a,
	0x0c, 0x8f, 0x9a, 0x1b, 0x5d, 0x9f, 0x20, 0xf5, 0x01, 0xc7, 0x2d, 0x32, 0x07, 0x98, 0x57, 0x98,
	0x49, 0xd4, 0x7a, 0x03, 0x93, 0x05, 0x6e, 0xb1, 0xb1, 0xc9, 0xaa, 0xcc, 0x1b, 0x26, 0x79, 0x84,
	0xc1, 0x9d, 0x92, 0x1b, 0x2c, 0x24, 0xa3, 0x0d, 0xad, 0x22, 0x70, 0x9f, 0x98, 0x90, 0x5a, 0x3d,
	0xbb, 0xdd, 0x5b, 0xe8, 0x2c, 0x51, 0x36, 0x49, 0x71, 0x0f, 0xbd, 0xfa, 0x07, 0xe5, 0x54, 0xed,
	0xb0, 0x90, 0x67, 0xfa, 0x44, 0xfd, 0xd7, 0xde, 0x11, 0x7d, 0x5e, 0xaf, 0xdb, 0xe6, 0x96, 0xcd,
	0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x82, 0x7f, 0x52, 0x7b, 0x95, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// if OK, chrome stores User object, and redirects to search page
	// else, chrome stays on registration page and display error msg
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// if OK, chrome redirects to login page
	// else, chrome stays on user profile page and displays error msg
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// if OK, chrome sets offical User object with copy User object, displays success msg to user
	// else, chrome will display error msg
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// if OK, chrome will store user object and whatever token?, redirect to search page
	// else, chrome will display error msg
	AuthenticateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// get list of all users in user collection
	ListUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// if OK, chrome will display Users first and last name and ask for confirmation?
	//      || display list of matched names and corresponding emails and ask user to select correct one
	//   Once user selects or confirms, chrome will store the matched users object under friends object
	// else, chrome will display not found msg or error msg
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// chrome makes request to share documents with found user
	// gateway passes
	//    1) request makers User object
	//    2) a list of DUIDS to share with
	//    3) found User object
	// svc will...
	ShareDocument(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AuthenticateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ShareDocument(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/hwscUserSvc.UserService/ShareDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetStatus(context.Context, *UserRequest) (*UserResponse, error)
	// if OK, chrome stores User object, and redirects to search page
	// else, chrome stays on registration page and display error msg
	CreateUser(context.Context, *UserRequest) (*UserResponse, error)
	// if OK, chrome redirects to login page
	// else, chrome stays on user profile page and displays error msg
	DeleteUser(context.Context, *UserRequest) (*UserResponse, error)
	// if OK, chrome sets offical User object with copy User object, displays success msg to user
	// else, chrome will display error msg
	UpdateUser(context.Context, *UserRequest) (*UserResponse, error)
	// if OK, chrome will store user object and whatever token?, redirect to search page
	// else, chrome will display error msg
	AuthenticateUser(context.Context, *UserRequest) (*UserResponse, error)
	// get list of all users in user collection
	ListUsers(context.Context, *UserRequest) (*UserResponse, error)
	// if OK, chrome will display Users first and last name and ask for confirmation?
	//      || display list of matched names and corresponding emails and ask user to select correct one
	//   Once user selects or confirms, chrome will store the matched users object under friends object
	// else, chrome will display not found msg or error msg
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	// chrome makes request to share documents with found user
	// gateway passes
	//    1) request makers User object
	//    2) a list of DUIDS to share with
	//    3) found User object
	// svc will...
	ShareDocument(context.Context, *UserRequest) (*UserResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStatus(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthenticateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscUserSvc.UserService/ShareDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ShareDocument(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hwscUserSvc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _UserService_GetStatus_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _UserService_AuthenticateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _UserService_ShareDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hwsc-user-svc.proto",
}
