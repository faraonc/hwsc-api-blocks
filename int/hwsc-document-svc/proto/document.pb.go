// Code generated by protoc-gen-go. DO NOT EDIT.
// source: document.proto

package hwscDocumentSvcPb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Document struct {
	// @inject_tag: bson:"duid"
	Duid string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty" bson:"duid"`
	// @inject_tag: bson:"uuid"
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty" bson:"uuid"`
	// @inject_tag: bson:"lastName"
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" bson:"lastName"`
	// @inject_tag: bson:"firstName"
	FirstName string `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" bson:"firstName"`
	// @inject_tag: bson:"callTypeName"
	CallTypeName string `protobuf:"bytes,5,opt,name=call_type_name,json=callTypeName,proto3" json:"call_type_name,omitempty" bson:"callTypeName"`
	// @inject_tag: bson:"groundType"
	GroundType string `protobuf:"bytes,6,opt,name=ground_type,json=groundType,proto3" json:"ground_type,omitempty" bson:"groundType"`
	// @inject_tag: bson:"region"
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty" bson:"region"`
	// @inject_tag: bson:"ocean"
	Ocean string `protobuf:"bytes,8,opt,name=ocean,proto3" json:"ocean,omitempty" bson:"ocean"`
	// @inject_tag: bson:"sensorType"
	SensorType string `protobuf:"bytes,9,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty" bson:"sensorType"`
	// @inject_tag: bson:"sensorName"
	SensorName string `protobuf:"bytes,10,opt,name=sensor_name,json=sensorName,proto3" json:"sensor_name,omitempty" bson:"sensorName"`
	// @inject_tag: bson:"sampleRate"
	SampleRate uint32 `protobuf:"varint,11,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty" bson:"sampleRate"`
	// @inject_tag: bson:"latitude"
	Latitude float32 `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude,omitempty" bson:"latitude"`
	// @inject_tag: bson:"longitude"
	Longitude float32 `protobuf:"fixed32,13,opt,name=longitude,proto3" json:"longitude,omitempty" bson:"longitude"`
	// @inject_tag: bson:"imageUrl"
	ImageUrl map[string]string `protobuf:"bytes,14,rep,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"imageUrl"`
	// @inject_tag: bson:"audioUrl"
	AudioUrl map[string]string `protobuf:"bytes,15,rep,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"audioUrl"`
	// @inject_tag: bson:"videoUrl"
	VideoUrl map[string]string `protobuf:"bytes,16,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"videoUrl"`
	// @inject_tag: bson:"fileUrl"
	FileUrl map[string]string `protobuf:"bytes,17,rep,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"fileUrl"`
	// @inject_tag: bson:"recordTimestamp"
	RecordTimestamp int64 `protobuf:"varint,18,opt,name=record_timestamp,json=recordTimestamp,proto3" json:"record_timestamp,omitempty" bson:"recordTimestamp"`
	// @inject_tag: bson:"createTimestamp"
	CreateTimestamp int64 `protobuf:"varint,19,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty" bson:"createTimestamp"`
	// @inject_tag: bson:"updateTimestamp"
	UpdateTimestamp      int64    `protobuf:"varint,20,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty" bson:"updateTimestamp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{0}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetDuid() string {
	if m != nil {
		return m.Duid
	}
	return ""
}

func (m *Document) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Document) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Document) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Document) GetCallTypeName() string {
	if m != nil {
		return m.CallTypeName
	}
	return ""
}

func (m *Document) GetGroundType() string {
	if m != nil {
		return m.GroundType
	}
	return ""
}

func (m *Document) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Document) GetOcean() string {
	if m != nil {
		return m.Ocean
	}
	return ""
}

func (m *Document) GetSensorType() string {
	if m != nil {
		return m.SensorType
	}
	return ""
}

func (m *Document) GetSensorName() string {
	if m != nil {
		return m.SensorName
	}
	return ""
}

func (m *Document) GetSampleRate() uint32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *Document) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Document) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Document) GetImageUrl() map[string]string {
	if m != nil {
		return m.ImageUrl
	}
	return nil
}

func (m *Document) GetAudioUrl() map[string]string {
	if m != nil {
		return m.AudioUrl
	}
	return nil
}

func (m *Document) GetVideoUrl() map[string]string {
	if m != nil {
		return m.VideoUrl
	}
	return nil
}

func (m *Document) GetFileUrl() map[string]string {
	if m != nil {
		return m.FileUrl
	}
	return nil
}

func (m *Document) GetRecordTimestamp() int64 {
	if m != nil {
		return m.RecordTimestamp
	}
	return 0
}

func (m *Document) GetCreateTimestamp() int64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *Document) GetUpdateTimestamp() int64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Document)(nil), "hwsc.Document")
	proto.RegisterMapType((map[string]string)(nil), "hwsc.Document.AudioUrlEntry")
	proto.RegisterMapType((map[string]string)(nil), "hwsc.Document.FileUrlEntry")
	proto.RegisterMapType((map[string]string)(nil), "hwsc.Document.ImageUrlEntry")
	proto.RegisterMapType((map[string]string)(nil), "hwsc.Document.VideoUrlEntry")
}

func init() { proto.RegisterFile("document.proto", fileDescriptor_9d2790a4091b3173) }

var fileDescriptor_9d2790a4091b3173 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8e, 0xd3, 0x3c,
	0x14, 0xc5, 0x95, 0xb6, 0xd3, 0x26, 0xb7, 0x7f, 0xa6, 0x9f, 0xbf, 0x11, 0x8a, 0x66, 0x06, 0x11,
	0x21, 0x16, 0x61, 0xd3, 0x05, 0x48, 0x08, 0x86, 0x15, 0x12, 0x20, 0xb1, 0x61, 0x11, 0x0d, 0x6c,
	0x23, 0x93, 0xdc, 0x16, 0x0b, 0x27, 0x8e, 0x1c, 0xbb, 0xa8, 0x0f, 0xcb, 0xbb, 0x20, 0xfb, 0xa6,
	0x93, 0x06, 0xcd, 0xa6, 0x3b, 0x9f, 0x73, 0x7e, 0xc7, 0xba, 0xba, 0x71, 0x60, 0x55, 0xaa, 0xc2,
	0x56, 0x58, 0x9b, 0x4d, 0xa3, 0x95, 0x51, 0x6c, 0xf2, 0xf3, 0x77, 0x5b, 0x3c, 0xff, 0x33, 0x83,
	0xf0, 0x63, 0x17, 0x30, 0x06, 0x93, 0xd2, 0x8a, 0x32, 0x0e, 0x92, 0x20, 0x8d, 0x32, 0x7f, 0x76,
	0x9e, 0x75, 0xde, 0x88, 0x3c, 0x77, 0x66, 0x37, 0x10, 0x49, 0xde, 0x9a, 0xbc, 0xe6, 0x15, 0xc6,
	0x63, 0x1f, 0x84, 0xce, 0xf8, 0xca, 0x2b, 0x64, 0x4f, 0x01, 0xb6, 0x42, 0x1f, 0xd3, 0x89, 0x4f,
	0x23, 0xef, 0xf8, 0xf8, 0x05, 0xac, 0x0a, 0x2e, 0x65, 0x6e, 0x0e, 0x0d, 0x12, 0x72, 0xe1, 0x91,
	0x85, 0x73, 0xef, 0x0f, 0x0d, 0x7a, 0xea, 0x19, 0xcc, 0x77, 0x5a, 0xd9, 0xba, 0xf4, 0x5c, 0x3c,
	0xf5, 0x08, 0x90, 0xe5, 0x20, 0xf6, 0x04, 0xa6, 0x1a, 0x77, 0x42, 0xd5, 0xf1, 0xcc, 0x67, 0x9d,
	0x62, 0x57, 0x70, 0xa1, 0x0a, 0xe4, 0x75, 0x1c, 0x7a, 0x9b, 0x84, 0xbb, 0xae, 0xc5, 0xba, 0x55,
	0x9a, 0xae, 0x8b, 0xe8, 0x3a, 0xb2, 0xfc, 0x75, 0x3d, 0xe0, 0x47, 0x82, 0x53, 0xe0, 0x38, 0x50,
	0xcb, 0xab, 0x46, 0x62, 0xae, 0xb9, 0xc1, 0x78, 0x9e, 0x04, 0xe9, 0x32, 0x03, 0xb2, 0x32, 0x6e,
	0x90, 0x5d, 0x43, 0x28, 0xb9, 0x11, 0xc6, 0x96, 0x18, 0x2f, 0x92, 0x20, 0x1d, 0x65, 0x0f, 0x9a,
	0xdd, 0x42, 0x24, 0x55, 0xbd, 0xa3, 0x70, 0xe9, 0xc3, 0xde, 0x60, 0xef, 0x20, 0x12, 0x15, 0xdf,
	0x61, 0x6e, 0xb5, 0x8c, 0x57, 0xc9, 0x38, 0x9d, 0xbf, 0xba, 0xdd, 0xb8, 0x8f, 0xb3, 0x39, 0x7e,
	0x98, 0xcd, 0x17, 0x97, 0x7f, 0xd3, 0xf2, 0x53, 0x6d, 0xf4, 0x21, 0x0b, 0x45, 0x27, 0x5d, 0x95,
	0xdb, 0x52, 0x28, 0x5f, 0xbd, 0x7c, 0xb4, 0xfa, 0xc1, 0xe5, 0x7d, 0x95, 0x77, 0xd2, 0x55, 0xf7,
	0xa2, 0x44, 0xaa, 0xae, 0x1f, 0xad, 0x7e, 0x77, 0x79, 0x5f, 0xdd, 0x77, 0x92, 0xbd, 0x81, 0x70,
	0x2b, 0x24, 0xcd, 0xfb, 0x9f, 0x6f, 0xde, 0xfc, 0xd3, 0xfc, 0x2c, 0x64, 0x3f, 0xee, 0x6c, 0x4b,
	0x8a, 0xbd, 0x84, 0xb5, 0xc6, 0x42, 0xe9, 0x32, 0x37, 0xa2, 0xc2, 0xd6, 0xf0, 0xaa, 0x89, 0x59,
	0x12, 0xa4, 0xe3, 0xec, 0x92, 0xfc, 0xfb, 0xa3, 0xed, 0xd0, 0x42, 0x23, 0x37, 0x78, 0x82, 0xfe,
	0x4f, 0x28, 0xf9, 0x03, 0xd4, 0x36, 0xe5, 0x10, 0xbd, 0x22, 0x94, 0xfc, 0x07, 0xf4, 0xfa, 0x3d,
	0x2c, 0x07, 0x9b, 0x64, 0x6b, 0x18, 0xff, 0xc2, 0x43, 0xf7, 0xde, 0xdd, 0xd1, 0xbd, 0x9f, 0x3d,
	0x97, 0x16, 0xbb, 0xf7, 0x4e, 0xe2, 0x6e, 0xf4, 0x36, 0x70, 0xe5, 0xc1, 0x2e, 0xcf, 0x2d, 0x0f,
	0xb6, 0x79, 0x56, 0xf9, 0x0e, 0x16, 0xa7, 0x0b, 0x3d, 0xa7, 0xfb, 0x63, 0xea, 0x7f, 0xf6, 0xd7,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x60, 0x95, 0xc9, 0xfe, 0x03, 0x00, 0x00,
}
