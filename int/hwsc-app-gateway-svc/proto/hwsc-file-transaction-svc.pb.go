// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hwsc-file-transaction-svc.proto

package hwsc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileTransactionRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uuid                 string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Urls                 []string `protobuf:"bytes,4,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileTransactionRequest) Reset()         { *m = FileTransactionRequest{} }
func (m *FileTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*FileTransactionRequest) ProtoMessage()    {}
func (*FileTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca740a3caeb1644, []int{0}
}

func (m *FileTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileTransactionRequest.Unmarshal(m, b)
}
func (m *FileTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileTransactionRequest.Marshal(b, m, deterministic)
}
func (m *FileTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileTransactionRequest.Merge(m, src)
}
func (m *FileTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_FileTransactionRequest.Size(m)
}
func (m *FileTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileTransactionRequest proto.InternalMessageInfo

func (m *FileTransactionRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FileTransactionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileTransactionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *FileTransactionRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type FileTransactionResponse struct {
	// Types that are valid to be assigned to Status:
	//	*FileTransactionResponse_Code
	Status               isFileTransactionResponse_Status `protobuf_oneof:"status"`
	Message              string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Url                  string                           `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FileTransactionResponse) Reset()         { *m = FileTransactionResponse{} }
func (m *FileTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*FileTransactionResponse) ProtoMessage()    {}
func (*FileTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca740a3caeb1644, []int{1}
}

func (m *FileTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileTransactionResponse.Unmarshal(m, b)
}
func (m *FileTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileTransactionResponse.Marshal(b, m, deterministic)
}
func (m *FileTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileTransactionResponse.Merge(m, src)
}
func (m *FileTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_FileTransactionResponse.Size(m)
}
func (m *FileTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileTransactionResponse proto.InternalMessageInfo

type isFileTransactionResponse_Status interface {
	isFileTransactionResponse_Status()
}

type FileTransactionResponse_Code struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

func (*FileTransactionResponse_Code) isFileTransactionResponse_Status() {}

func (m *FileTransactionResponse) GetStatus() isFileTransactionResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FileTransactionResponse) GetCode() uint32 {
	if x, ok := m.GetStatus().(*FileTransactionResponse_Code); ok {
		return x.Code
	}
	return 0
}

func (m *FileTransactionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FileTransactionResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FileTransactionResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FileTransactionResponse_OneofMarshaler, _FileTransactionResponse_OneofUnmarshaler, _FileTransactionResponse_OneofSizer, []interface{}{
		(*FileTransactionResponse_Code)(nil),
	}
}

func _FileTransactionResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FileTransactionResponse)
	// status
	switch x := m.Status.(type) {
	case *FileTransactionResponse_Code:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Code))
	case nil:
	default:
		return fmt.Errorf("FileTransactionResponse.Status has unexpected type %T", x)
	}
	return nil
}

func _FileTransactionResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FileTransactionResponse)
	switch tag {
	case 1: // status.code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Status = &FileTransactionResponse_Code{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _FileTransactionResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FileTransactionResponse)
	// status
	switch x := m.Status.(type) {
	case *FileTransactionResponse_Code:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Code))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Chunk struct {
	// Types that are valid to be assigned to TestOneof:
	//	*Chunk_Buffer
	//	*Chunk_Length
	//	*Chunk_FileName
	//	*Chunk_Uuid
	TestOneof            isChunk_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca740a3caeb1644, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

type isChunk_TestOneof interface {
	isChunk_TestOneof()
}

type Chunk_Buffer struct {
	Buffer []byte `protobuf:"bytes,1,opt,name=buffer,proto3,oneof"`
}

type Chunk_Length struct {
	Length int64 `protobuf:"varint,2,opt,name=length,proto3,oneof"`
}

type Chunk_FileName struct {
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3,oneof"`
}

type Chunk_Uuid struct {
	Uuid string `protobuf:"bytes,4,opt,name=uuid,proto3,oneof"`
}

func (*Chunk_Buffer) isChunk_TestOneof() {}

func (*Chunk_Length) isChunk_TestOneof() {}

func (*Chunk_FileName) isChunk_TestOneof() {}

func (*Chunk_Uuid) isChunk_TestOneof() {}

func (m *Chunk) GetTestOneof() isChunk_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *Chunk) GetBuffer() []byte {
	if x, ok := m.GetTestOneof().(*Chunk_Buffer); ok {
		return x.Buffer
	}
	return nil
}

func (m *Chunk) GetLength() int64 {
	if x, ok := m.GetTestOneof().(*Chunk_Length); ok {
		return x.Length
	}
	return 0
}

func (m *Chunk) GetFileName() string {
	if x, ok := m.GetTestOneof().(*Chunk_FileName); ok {
		return x.FileName
	}
	return ""
}

func (m *Chunk) GetUuid() string {
	if x, ok := m.GetTestOneof().(*Chunk_Uuid); ok {
		return x.Uuid
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Chunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Chunk_OneofMarshaler, _Chunk_OneofUnmarshaler, _Chunk_OneofSizer, []interface{}{
		(*Chunk_Buffer)(nil),
		(*Chunk_Length)(nil),
		(*Chunk_FileName)(nil),
		(*Chunk_Uuid)(nil),
	}
}

func _Chunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Chunk)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *Chunk_Buffer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Buffer)
	case *Chunk_Length:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Length))
	case *Chunk_FileName:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.FileName)
	case *Chunk_Uuid:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Uuid)
	case nil:
	default:
		return fmt.Errorf("Chunk.TestOneof has unexpected type %T", x)
	}
	return nil
}

func _Chunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Chunk)
	switch tag {
	case 1: // test_oneof.buffer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.TestOneof = &Chunk_Buffer{x}
		return true, err
	case 2: // test_oneof.length
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &Chunk_Length{int64(x)}
		return true, err
	case 3: // test_oneof.file_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = &Chunk_FileName{x}
		return true, err
	case 4: // test_oneof.uuid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = &Chunk_Uuid{x}
		return true, err
	default:
		return false, nil
	}
}

func _Chunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Chunk)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *Chunk_Buffer:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Buffer)))
		n += len(x.Buffer)
	case *Chunk_Length:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Length))
	case *Chunk_FileName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.FileName)))
		n += len(x.FileName)
	case *Chunk_Uuid:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Uuid)))
		n += len(x.Uuid)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FileTransactionRequest)(nil), "hwscFileTransactionSvc.FileTransactionRequest")
	proto.RegisterType((*FileTransactionResponse)(nil), "hwscFileTransactionSvc.FileTransactionResponse")
	proto.RegisterType((*Chunk)(nil), "hwscFileTransactionSvc.Chunk")
}

func init() { proto.RegisterFile("hwsc-file-transaction-svc.proto", fileDescriptor_0ca740a3caeb1644) }

var fileDescriptor_0ca740a3caeb1644 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xb5, 0xb1, 0x4b, 0x61, 0x44, 0x25, 0xb4, 0x45, 0xd4, 0xaa, 0x84, 0x8a, 0x7c, 0xe2, 0x82,
	0x5b, 0xb5, 0xff, 0x00, 0x2a, 0xca, 0xa9, 0x07, 0x53, 0x2e, 0xbd, 0x50, 0x63, 0x8f, 0xb1, 0xd5,
	0x65, 0xd7, 0xd9, 0x0f, 0xb8, 0xe5, 0x0f, 0xe6, 0x4f, 0x45, 0xbb, 0x76, 0x94, 0x0f, 0x48, 0x94,
	0xe4, 0x90, 0xdb, 0xbc, 0x37, 0xa3, 0xf7, 0x66, 0xde, 0x6a, 0xe1, 0x4b, 0x71, 0x94, 0xe9, 0x34,
	0x2f, 0x29, 0x4e, 0x95, 0x48, 0x98, 0x4c, 0x52, 0x55, 0x72, 0x36, 0x95, 0x87, 0x34, 0xaa, 0x04,
	0x57, 0x9c, 0x0c, 0xcd, 0xc0, 0xa2, 0xa4, 0xf8, 0xe7, 0xb6, 0xbd, 0x3a, 0xa4, 0x21, 0x83, 0xe1,
	0x03, 0x36, 0xc6, 0x0b, 0x8d, 0x52, 0x91, 0x00, 0xde, 0xef, 0x51, 0xca, 0x64, 0x87, 0x81, 0x3b,
	0x76, 0x27, 0xdd, 0xf8, 0x06, 0x12, 0x02, 0x3e, 0x4b, 0xf6, 0x18, 0xb4, 0x2c, 0x6d, 0x6b, 0xc3,
	0x69, 0x5d, 0x66, 0x81, 0x57, 0x73, 0xa6, 0xb6, 0x9c, 0xa0, 0x32, 0xf0, 0xc7, 0x9e, 0xe5, 0x04,
	0x95, 0x21, 0xc2, 0xa7, 0x13, 0x3f, 0x59, 0x71, 0x26, 0x91, 0x0c, 0xc0, 0x4f, 0x79, 0x56, 0xbb,
	0x7d, 0x58, 0x3a, 0xb1, 0x45, 0x77, 0xd7, 0x68, 0xdd, 0x5f, 0xa3, 0x0f, 0x9e, 0x16, 0xb4, 0x71,
	0x34, 0xe5, 0xac, 0x03, 0x6d, 0xa9, 0x12, 0xa5, 0x65, 0x78, 0x09, 0xef, 0xe6, 0x85, 0x66, 0xff,
	0x49, 0x00, 0xed, 0xad, 0xce, 0x73, 0x14, 0x56, 0xb6, 0xb7, 0x74, 0xe2, 0x06, 0x9b, 0x0e, 0x45,
	0xb6, 0x53, 0x85, 0xd5, 0xf5, 0x4c, 0xa7, 0xc6, 0x64, 0x04, 0x5d, 0x93, 0xe4, 0xc6, 0x1e, 0x69,
	0xe5, 0x97, 0x4e, 0xdc, 0x31, 0xd4, 0x6f, 0x73, 0xea, 0xa0, 0x39, 0xd5, 0x6f, 0x3a, 0x16, 0xcd,
	0x7a, 0x00, 0x0a, 0xa5, 0xda, 0x70, 0x86, 0x3c, 0xff, 0x7e, 0xe5, 0x9d, 0xe4, 0xba, 0x42, 0x71,
	0x28, 0x53, 0x24, 0x0c, 0xba, 0xbf, 0x50, 0xad, 0xec, 0x9e, 0x24, 0x8a, 0xce, 0xbf, 0x4b, 0x74,
	0xfe, 0x51, 0x3e, 0x7f, 0x7d, 0xf6, 0x7c, 0x1d, 0x6a, 0xe8, 0x90, 0x7f, 0x00, 0xeb, 0x8a, 0xf2,
	0x24, 0x33, 0x23, 0x64, 0xf4, 0x98, 0x80, 0x8d, 0xeb, 0x15, 0xfa, 0x13, 0x97, 0x14, 0xf0, 0xf1,
	0x27, 0x3f, 0x32, 0xe3, 0xf1, 0xb7, 0xac, 0x2a, 0xb4, 0x4e, 0x2f, 0xbf, 0xed, 0xe9, 0xd5, 0x42,
	0xe7, 0x9b, 0x4b, 0x34, 0xf4, 0xe7, 0x02, 0x13, 0x85, 0x6b, 0x89, 0x62, 0xc1, 0x69, 0x86, 0xe2,
	0x0d, 0x22, 0xdc, 0xb6, 0xed, 0x1f, 0xfa, 0x71, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x8f, 0x8b,
	0x7c, 0x66, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileTransactionServiceClient is the client API for FileTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileTransactionServiceClient interface {
	GetStatus(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (*FileTransactionResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransactionService_UploadFileClient, error)
	DownloadZippedFiles(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (FileTransactionService_DownloadZippedFilesClient, error)
	CreateUserFolder(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (*FileTransactionResponse, error)
}

type fileTransactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileTransactionServiceClient(cc *grpc.ClientConn) FileTransactionServiceClient {
	return &fileTransactionServiceClient{cc}
}

func (c *fileTransactionServiceClient) GetStatus(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (*FileTransactionResponse, error) {
	out := new(FileTransactionResponse)
	err := c.cc.Invoke(ctx, "/hwscFileTransactionSvc.FileTransactionService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransactionServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransactionService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransactionService_serviceDesc.Streams[0], "/hwscFileTransactionSvc.FileTransactionService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransactionServiceUploadFileClient{stream}
	return x, nil
}

type FileTransactionService_UploadFileClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*FileTransactionResponse, error)
	grpc.ClientStream
}

type fileTransactionServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileTransactionServiceUploadFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransactionServiceUploadFileClient) CloseAndRecv() (*FileTransactionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransactionServiceClient) DownloadZippedFiles(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (FileTransactionService_DownloadZippedFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransactionService_serviceDesc.Streams[1], "/hwscFileTransactionSvc.FileTransactionService/DownloadZippedFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransactionServiceDownloadZippedFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransactionService_DownloadZippedFilesClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type fileTransactionServiceDownloadZippedFilesClient struct {
	grpc.ClientStream
}

func (x *fileTransactionServiceDownloadZippedFilesClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransactionServiceClient) CreateUserFolder(ctx context.Context, in *FileTransactionRequest, opts ...grpc.CallOption) (*FileTransactionResponse, error) {
	out := new(FileTransactionResponse)
	err := c.cc.Invoke(ctx, "/hwscFileTransactionSvc.FileTransactionService/CreateUserFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransactionServiceServer is the server API for FileTransactionService service.
type FileTransactionServiceServer interface {
	GetStatus(context.Context, *FileTransactionRequest) (*FileTransactionResponse, error)
	UploadFile(FileTransactionService_UploadFileServer) error
	DownloadZippedFiles(*FileTransactionRequest, FileTransactionService_DownloadZippedFilesServer) error
	CreateUserFolder(context.Context, *FileTransactionRequest) (*FileTransactionResponse, error)
}

func RegisterFileTransactionServiceServer(s *grpc.Server, srv FileTransactionServiceServer) {
	s.RegisterService(&_FileTransactionService_serviceDesc, srv)
}

func _FileTransactionService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransactionServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscFileTransactionSvc.FileTransactionService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransactionServiceServer).GetStatus(ctx, req.(*FileTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransactionService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransactionServiceServer).UploadFile(&fileTransactionServiceUploadFileServer{stream})
}

type FileTransactionService_UploadFileServer interface {
	SendAndClose(*FileTransactionResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileTransactionServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileTransactionServiceUploadFileServer) SendAndClose(m *FileTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransactionServiceUploadFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTransactionService_DownloadZippedFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransactionServiceServer).DownloadZippedFiles(m, &fileTransactionServiceDownloadZippedFilesServer{stream})
}

type FileTransactionService_DownloadZippedFilesServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type fileTransactionServiceDownloadZippedFilesServer struct {
	grpc.ServerStream
}

func (x *fileTransactionServiceDownloadZippedFilesServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransactionService_CreateUserFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransactionServiceServer).CreateUserFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hwscFileTransactionSvc.FileTransactionService/CreateUserFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransactionServiceServer).CreateUserFolder(ctx, req.(*FileTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileTransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hwscFileTransactionSvc.FileTransactionService",
	HandlerType: (*FileTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _FileTransactionService_GetStatus_Handler,
		},
		{
			MethodName: "CreateUserFolder",
			Handler:    _FileTransactionService_CreateUserFolder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileTransactionService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadZippedFiles",
			Handler:       _FileTransactionService_DownloadZippedFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hwsc-file-transaction-svc.proto",
}
